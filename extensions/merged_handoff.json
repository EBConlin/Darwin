{
  "darwin_kaya_full_export": {
    "metadata": {
      "export_time": "2025-05-06T21:17:23.161805",
      "description": "Complete system summary of Darwin and Kaya architectures, protocols, and development directions."
    },
    "darwin": {
      "role": "Meta-evolutionary cognitive system that evolves agents, theories, tools, and experiments.",
      "architecture": {
        "components": {
          "agent_swarm": "Distributed agents exploring, mutating, and refining attribution functions and experiments.",
          "em_loop": "Expectation-Maximization loop driving theory generation and validation.",
          "synergetics_roles": {
            "order_parameters": "Emergent global attractors (e.g., high-level theories)",
            "enslaved_variables": "Experimental details, motif execution patterns",
            "instabilities": "Trigger agent bifurcation or evolution",
            "fluctuations": "Drive creative mutation and emergence"
          },
          "theory_culture_loop": "Agents exchange, debate, and recombine theories. Cultural motifs emerge.",
          "stimlang_engine": "Protocol for generating and delivering structured stimulation/intervention patterns.",
          "heg_integration": "Hierarchical embedded graph used for compression, curriculum definition, motif discovery."
        }
      },
      "evolutionary_loops": {
        "symbolic": "EM + cultural loop driving theory refinement",
        "toolchain": "Software tools evolved for utility, novelty, and symbolic interpretability",
        "meta": "Meta-agent layer prunes stagnation, injects curriculum pressure, tracks global state"
      },
      "outputs": {
        "interpretable_artifacts": "Motifs, theories, experiment logs, cultural lineage trees",
        "agent_exports": "Reusable agent configs and behavioral templates",
        "science_reports": "Auto-generated reports from evolutionary runs (planned)"
      }
    },
    "kaya": {
      "role": "Biological co-evolver and embodied neural partner for Darwin.",
      "architecture": {
        "tiered_ecosystem": {
          "tier_0": "Agent-level stimlang simulations and synthetic tasks",
          "tier_1": "Neural stem cell cultures in neurochemostats (high mutation rate)",
          "tier_2": "Stable brain slices for long-term memory and slow evolution",
          "tier_3": "Inter-layer synthesis and integration (Darwin acts like corpus callosum)"
        },
        "stimlang_interface": "Language for modulating biological neurons via glial chemical patterns or optogenetics",
        "reward_mechanisms": [
          "Microfluidic delivery of neuromodulators",
          "Electrode or optogenetic feedback",
          "Indirect glial or astrocyte modulation"
        ],
        "astrocyte_maps": "Distributed representation of state, used to gate or shape response to stimlang"
      },
      "creative_attractors": "Neural patterns that demonstrate surprising generalization, compression, or analogical structure"
    },
    "shared_components": {
      "motif_system": "Reusable abstract units (symbolic, cognitive, or neural) selected across evolution",
      "hierarchical_state_machines": "Used in both agents and stimlang programs",
      "cultural_memory": "Passed across agent generations, cultures, or brain slice layers",
      "feedback_layers": "Cross-talk between Darwin's internal models and Kaya\u2019s biofeedback",
      "dream_phases": "Offline replay/restructuring phases for consolidation, compression, and self-modeling"
    },
    "extensions": {
      "self_reflective_agents": "Agents model themselves using causal DAGs and internal interventions",
      "meta_agents": "Monitor data entropy, stagnation, and can inject new data or restart evolution",
      "multi_modal_scoring": "Fitness evaluated on utility, novelty, interpretability, and uncertainty reduction",
      "tool_evolution_engine": "Custom tools written or evolved by agents and selected for reusability"
    }
  },
  "darwin_system_summary": {
    "system_name": "Darwin",
    "version": "0.1",
    "last_updated": "2025-05-06T17:07:25.974626",
    "description": "Darwin is a meta-evolutionary AI system designed to evolve agents, theories, tools, and experiments in a self-refining cycle. Inspired by scientific discovery and biological evolution.",
    "core_philosophy": {
      "goals": [
        "Evolve open-ended problem-solving agents",
        "Iteratively refine hypotheses, motifs, and theories",
        "Use multi-loop evolution (genetic, symbolic, cultural)",
        "Generate interpretable, useful scientific insights"
      ],
      "design_principles": [
        "Hierarchy of agents, motifs, and tasks",
        "Bayesian optimization + evolutionary pruning",
        "Reflective cycles of evaluation and mutation",
        "Synergetics-based control of emergent dynamics"
      ]
    },
    "architecture": {
      "agents": {
        "description": "Instantiated from combinations of motifs and theories. Evaluated on performance and interpretability.",
        "components": [
          "Motifs",
          "Theories",
          "Stimlang Configs"
        ]
      },
      "motifs": {
        "description": "Reusable behavioral or structural templates. Evolved, reused, scored.",
        "attributes": [
          "fitness",
          "reuse_count",
          "agent_usage"
        ]
      },
      "theories": {
        "description": "Structured hypotheses with priors and likelihoods. Mutated and recombined across rounds.",
        "mechanism": "Expectation-Maximization + Cultural Evolution"
      },
      "stimlang_configs": {
        "description": "Hierarchical state machines defining experimental protocols or sensory input cycles.",
        "structure": [
          "Optimization Phase",
          "Optional Task Phase"
        ]
      },
      "scoring_system": {
        "criteria": [
          "Utility",
          "Interpretability",
          "Novelty",
          "Consistency"
        ],
        "methods": [
          "Bayesian Surprise",
          "HEG-Path Fit",
          "Symbolic Compression"
        ]
      },
      "meta_agents": {
        "roles": [
          "Data Request",
          "Fitness Adjustment",
          "Narrative Interpretation"
        ],
        "control": "Top-down injection of pressure, tasks, or constraints"
      },
      "tool_evolution": {
        "description": "Evolving software tools in a simulated ecosystem.",
        "methods": [
          "Mutation",
          "Recombination",
          "Interpretability Scoring"
        ]
      },
      "HEG": {
        "description": "Hierarchical Embedded Graph used for abstract knowledge compression, path querying, and task generation.",
        "uses": [
          "Fact-checking",
          "Motif discovery",
          "Curriculum evolution"
        ]
      }
    },
    "current_capabilities": [
      "EM-loop for theory evolution",
      "Agent instantiation via motifs + theories",
      "Meta-agent monitoring and data injection",
      "HEG-based reasoning and compression",
      "Stimlang simulation and optimization loop",
      "Motif and tool reuse scoring",
      "Knowledge serialization in .json and .txt"
    ],
    "planned_extensions": [
      "Interpretation/storytelling agents",
      "Motif usage graph visualization",
      "Theory lineage graph tracking",
      "Formal science-report outputs",
      "Task generation via contradiction/surprise"
    ]
  },
  "darwin_synergetics_state": {
    "22aa5645-f18f-48d3-8b3c-212947635e64": {
      "agent_id": "22aa5645-f18f-48d3-8b3c-212947635e64",
      "motif": "initial_concept_compression",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.8737210850479754,
      "children": [
        "f5caf3e4-b26e-4a70-b378-b997ad2a819f",
        "9e13189e-608f-42ae-a594-17393bd24979",
        "47a87b98-12ae-4604-8539-985e649c51ac"
      ],
      "status": "bifurcated"
    },
    "f5caf3e4-b26e-4a70-b378-b997ad2a819f": {
      "agent_id": "f5caf3e4-b26e-4a70-b378-b997ad2a819f",
      "motif": "initial_concept_compression_variant_0",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.668886655008073,
      "children": [
        "e8bcbfd0-3a5b-4b7b-8dea-0a88c4b02523",
        "f7eeae9a-1f7f-407b-9ead-afaede2a90f2"
      ],
      "status": "bifurcated"
    },
    "9e13189e-608f-42ae-a594-17393bd24979": {
      "agent_id": "9e13189e-608f-42ae-a594-17393bd24979",
      "motif": "initial_concept_compression_variant_1",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.6408936766759548,
      "children": [
        "9ccafaf6-1219-4509-a191-50f5339304c7",
        "9801ab4d-65f0-4a31-ad31-c9d5128b87f7"
      ],
      "status": "bifurcated"
    },
    "47a87b98-12ae-4604-8539-985e649c51ac": {
      "agent_id": "47a87b98-12ae-4604-8539-985e649c51ac",
      "motif": "initial_concept_compression_variant_2",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.9213310374103516,
      "children": [
        "70be2671-0b5f-467e-85dd-81d83451c4c7",
        "6defdd2b-8bc6-4c3f-ab56-4df58563518d",
        "d82e1888-10fa-4bfd-abb5-0cdb8aca69b1"
      ],
      "status": "bifurcated"
    },
    "9ccafaf6-1219-4509-a191-50f5339304c7": {
      "agent_id": "9ccafaf6-1219-4509-a191-50f5339304c7",
      "motif": "initial_concept_compression_variant_1_variant_0",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.2857111939027627,
      "children": [],
      "status": "active"
    },
    "9801ab4d-65f0-4a31-ad31-c9d5128b87f7": {
      "agent_id": "9801ab4d-65f0-4a31-ad31-c9d5128b87f7",
      "motif": "initial_concept_compression_variant_1_variant_1",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.6365514104147982,
      "children": [
        "a66725ce-9990-40bc-a9d2-49f8ab657bd1",
        "4adfbf4f-b167-416c-a267-050a05e9241c",
        "43af18cd-d57c-4877-bff7-efa1aecdbceb"
      ],
      "status": "bifurcated"
    },
    "e8bcbfd0-3a5b-4b7b-8dea-0a88c4b02523": {
      "agent_id": "e8bcbfd0-3a5b-4b7b-8dea-0a88c4b02523",
      "motif": "initial_concept_compression_variant_0_variant_0",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    },
    "f7eeae9a-1f7f-407b-9ead-afaede2a90f2": {
      "agent_id": "f7eeae9a-1f7f-407b-9ead-afaede2a90f2",
      "motif": "initial_concept_compression_variant_0_variant_1",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    },
    "70be2671-0b5f-467e-85dd-81d83451c4c7": {
      "agent_id": "70be2671-0b5f-467e-85dd-81d83451c4c7",
      "motif": "initial_concept_compression_variant_2_variant_0",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    },
    "6defdd2b-8bc6-4c3f-ab56-4df58563518d": {
      "agent_id": "6defdd2b-8bc6-4c3f-ab56-4df58563518d",
      "motif": "initial_concept_compression_variant_2_variant_1",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    },
    "d82e1888-10fa-4bfd-abb5-0cdb8aca69b1": {
      "agent_id": "d82e1888-10fa-4bfd-abb5-0cdb8aca69b1",
      "motif": "initial_concept_compression_variant_2_variant_2",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    },
    "a66725ce-9990-40bc-a9d2-49f8ab657bd1": {
      "agent_id": "a66725ce-9990-40bc-a9d2-49f8ab657bd1",
      "motif": "initial_concept_compression_variant_1_variant_1_variant_0",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    },
    "4adfbf4f-b167-416c-a267-050a05e9241c": {
      "agent_id": "4adfbf4f-b167-416c-a267-050a05e9241c",
      "motif": "initial_concept_compression_variant_1_variant_1_variant_1",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    },
    "43af18cd-d57c-4877-bff7-efa1aecdbceb": {
      "agent_id": "43af18cd-d57c-4877-bff7-efa1aecdbceb",
      "motif": "initial_concept_compression_variant_1_variant_1_variant_2",
      "control_parameters": {
        "data_noise": 0.2,
        "reward_sensitivity": 0.5
      },
      "order_parameter": null,
      "instability_score": 0.0,
      "children": [],
      "status": "active"
    }
  },
  "HEG_task_runner": {
    "name": "HEG_TaskRunner",
    "description": "An agent module responsible for generating, executing, and evaluating tasks using the Hierarchical Embedded Graph (HEG) structure as a knowledge substrate.",
    "capabilities": {
      "task_generation": [
        "Sample paths from HEG starting from a given node or concept",
        "Use abstract embeddings and community structure to define conceptual distance",
        "Propose task hypotheses (e.g., analogies, discoveries, missing link detection)"
      ],
      "task_execution": [
        "Run A* or path enumeration queries across HEG",
        "Evaluate how task structures connect through communities",
        "Translate paths into interpretable knowledge chains"
      ],
      "task_evaluation": [
        "Score based on novelty, coherence, cross-community bridging",
        "Record result embeddings and semantic patterns",
        "Feed results to Darwin or other curriculum agents for scoring or reinforcement"
      ]
    },
    "inputs": {
      "source_node": "ID or label of the node to start from",
      "task_type": "e.g., 'analogy', 'missing link', 'prediction'",
      "parameters": {
        "path_length": "Number of hops or abstract path constraint",
        "embedding_radius": "Optional constraint on semantic distance",
        "community_jumps": "Whether to enforce cross-community traversal"
      }
    },
    "outputs": {
      "task_path": "List of node IDs or concepts forming the knowledge path",
      "task_description": "Human-readable interpretation of the task",
      "task_score": "Evaluated score of usefulness or novelty",
      "meta": {
        "communities_crossed": "Number and type of community boundaries crossed",
        "embedding_span": "Distance in semantic space"
      }
    },
    "loop_integration": {
      "feeds_to": [
        "Darwin",
        "CurriculumEngine",
        "MotifLibrary"
      ],
      "triggers": [
        "When a new cluster is added",
        "When stagnation in exploration occurs",
        "When motif reuse falls below threshold"
      ]
    }
  }
}